from flask import Flask, request, render_template, session, redirect, url_for
from flask_bootstrap import Bootstrap
from flask_assets import Environment, Bundle
from flask_moment import Moment
from datetime import datetime
from flask_wtf import FlaskForm
from wtforms import StringField,SubmitField
from wtforms.validators import DataRequired
from flask_images import Images, resized_img_src
from flask_mail import Mail
import os
from flask_sqlalchemy import SQLAlchemy

db_uri="mysql+mysqlconnector://eskimotv_sitedb:KM3w51CWju92@server3.bentsea.net/eskimotv_sitedb"

app = Flask(__name__)
app.config['MAIL_SERVER']='server3.bentsea.net'
app.config['MAIL_PORT']=25
app.config['MAIL_USE_TLS']=False
app.config['MAIL_USERNAME']=os.environ.get('MAIL_USERNAME')
app.config['MAIL_PASSWORD']=os.environ.get('MAIL_PASSWORD')
app.config['ASSETS_DEBUG'] = True
app.config['analytics']="UA-139537074-2"
app.config['SECRET_KEY']="zEC1yH6twLV5bI7pDP7d"
app.config['title']="EskimoTV"
app.config['email']="movieinfo@eskimotv.net"
app.config['description']=" A home for critical and honest reviews that strive for a thoughtful exploration of all forms of art and expression, especially reviews of movies, music, TV, and games!"
app.config['SQLALCHEMY_DATABASE_URI'] = db_uri
app.config['SQLALCHEMY_TRACK_MODIFICATIONS']=False
db = SQLAlchemy(app)
mail = Mail(app)
bootstrap = Bootstrap(app)
assets = Environment(app)
moment = Moment(app)
images = Images(app)

class Role(db.Model):
    __tablename__='roles'
    id=db.Column(db.Integer,primary_key=True)
    name=db.Column(db.String(64),unique=True)
    users = db.relationship('User',backref='role',lazy='dynamic')

    def __repr__(self):
        return '<Role {}>'.format(self.name)

class User(db.Model):
    __tablename__='users'
    id=db.Column(db.Integer,primary_key=True)
    username=db.Column(db.String(64),unique=True,index=True)
    role_id = db.Column(db.Integer,db.ForeignKey('roles.id'))

    def __repr__(self):
        return '<User {}>'.format(self.username)

class NameForm(FlaskForm):
    name = StringField('What is your name?',validators=[DataRequired()])
    submit = SubmitField('Submit')

scss = Bundle('css/main.scss',filters="pyscss",output="css/main.css")
all_css = Bundle('css/bootstrap.min.css','css/bootstrap-theme.min.css','css/owl.carousel.css','css/owl.theme.css','css/owl.transitions.css','css/social-share-kit.css',scss,filters="cssmin",output="gen/all.css")
assets.register('all_css',all_css)

js = Bundle('js/*.js',filters="jsmin",output="gen/all.js")
assets.register('all_js',js)

@app.route('/', methods=['GET','POST'])
def index():
    form=NameForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.name.data).first()
        if user is None:
            user = User(username=form.name.data)
            db.session.add(user)
            db.session.commit()
            session['known']=False
        else:
            session['known']=True
        session['name'] = form.name.data
        form.name.data = ''
        return redirect(url_for('index'))
    return render_template('home.html.j2',form = form, name=session.get('name'), current_time=datetime.utcnow(),known=session.get('known',False))

@app.route('/user/<name>')
def user(name):
    return render_template("user.html", name=name)
